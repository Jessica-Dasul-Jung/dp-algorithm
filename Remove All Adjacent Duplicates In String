/*
  Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.
  We repeatedly make duplicate removals on S until we no longer can.
  Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.
*/

class Solution {
public:
    string removeDuplicates(string S) {
        int size = S.size();
        int i;
        string ret;
        
        for (i = 0; i < size; i++) {
            if (ret != "" && ret.back() == S[i]) {
                ret.pop_back();
            }
            else ret.push_back(S[i]);
        }
        return ret;
    }
};
