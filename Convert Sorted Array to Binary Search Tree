Given an array where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth 
of the two subtrees of every node never differ by more than 1.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int size = nums.size();
        if (size == 0) {
            return nullptr;
        }
        else if (size == 1) {
            return new TreeNode(nums[0]);
        }
        
        int mid = size / 2;
        TreeNode* ret = new TreeNode(nums[mid]);
        
        vector<int> left_vec(nums.begin(), nums.begin() + mid);
        vector<int> right_vec (nums.begin() + mid + 1, nums.end());
        ret->right = sortedArrayToBST(right_vec);
        ret->left = sortedArrayToBST(left_vec);
        return ret;        
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* arrayToBST(int low, int high, vector<int>& nums) {
        if (low > high) {
            return nullptr;
        }
        int mid = (low + high) / 2;
        TreeNode* elem = new TreeNode(nums[mid]);
        elem->left = arrayToBST(low, mid - 1, nums);
        elem->right = arrayToBST(mid + 1, high, nums);
        return elem;
        
    }
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return arrayToBST(0, nums.size() - 1, nums);        
    }
};
