/*
  We have a list of points on the plane.  Find the K closest points to the origin (0, 0).
  (Here, the distance between two points on a plane is the Euclidean distance.)
  You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)
*/

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        if (points.size() <= K)
            return points;
        
        vector<vector<int>> ret;
        
        vector<pair<double, int>> dist;
        int size = points.size();
        double distance;
        int i;
        for (i = 0; i < size; i++) {
            distance = sqrt (points[i][0] * points[i][0] + points[i][1] * points[i][1]);
            dist.push_back(make_pair(distance, i));
        } 
        sort(dist.begin(), dist.end());        
        for (i = 0; i < K; i++) {
            ret.push_back(points[dist[i].second]);
        }
        return ret;
    }
};

/*
  Result:
    Runtime: 228 ms
    Memory Usage: 45.3 MB
*/
