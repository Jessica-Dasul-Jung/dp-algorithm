class MyHashMap {
public:
    /** Initialize your data structure here. */
    MyHashMap() {
        m_data.resize(m_size);
    }
    
    /** value will always be non-negative. */
    void put(int key, int value) {
        auto& list_elem = m_data[key % m_size];
        for (auto& i : list_elem) {
            if (i.first == key) {
                i.second = value;
                return;
            }
        }
        list_elem.emplace_front(key, value);
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key) {
        const auto& list_elem = m_data[key % m_size];
        for (auto& it : list_elem) {
            if (it.first == key) {
                return it.second;
            }
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) {
        auto& list_elem = m_data[key % m_size];
        list_elem.remove_if([key](auto& n) { return n.first == key; });
    }
private:
    vector<list<pair<int, int>>> m_data;
    int m_size = 10000;
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
