/*
  Given a string S that only contains "I" (increase) or "D" (decrease), let N = S.length.
  
  Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1:
    If S[i] == "I", then A[i] < A[i+1]
    If S[i] == "D", then A[i] > A[i+1]
*/

class Solution {
public:
    vector<int> diStringMatch(string S) {
        int N = S.length();
        vector<int> ret;
        int i;
        int high = N;
        int low = 0;
        for (i = 0; i < N; i++) {
            if (S[i] == 'I') {
                ret.push_back(low);
                low++;
            }
            else {
                ret.push_back(high);
                high--;
            }
        }
        if (S[N - 1] == 'I') {
            ret.push_back(high);
        }
        else ret.push_back(low);
        return ret;
    }
};
