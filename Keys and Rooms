/*
  There are N rooms and you start in room 0.  Each room has a distinct number in 0, 1, 2, ..., N-1, and 
  each room may have some keys to access the next room. 
  Formally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] 
  where N = rooms.length.  A key rooms[i][j] = v opens the room with number v.
  Initially, all the rooms start locked (except for room 0). 
  You can walk back and forth between rooms freely.
  Return true if and only if you can enter every room.
*/

class Solution {
public:
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        int size = rooms.size();
        int key_num, j, cur_room;
        int cnt = 1;
        stack<int> key;
        
        bool visited[size];
        for (j = 0; j < size; j++) {
            visited[j] = false;
        }
        
        visited[0] = true;
        key_num = rooms[0].size();
        for (j = 0; j < key_num; j++) {
            key.push(rooms[0][j]);
        }        
        while (!key.empty()) { //while there are still keys left
            cur_room = key.top();
            key.pop();
            if (!visited[cur_room]) { //not visited
                visited[cur_room] = true;
                cnt++;
                key_num = rooms[cur_room].size();
                for (j = 0; j < key_num; j++) {
                    key.push(rooms[cur_room][j]);
                }
            }
        }
        return (cnt == size);
    }
};
